// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package models

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type credentialsTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *credentialsTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("credentials").
func (v *credentialsTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *credentialsTableType) Columns() []string {
	return []string{"id", "login", "email", "phone", "password", "create_dttm"}
}

// NewStruct makes a new struct for that view or table.
func (v *credentialsTableType) NewStruct() reform.Struct {
	return new(Credentials)
}

// NewRecord makes a new record for that table.
func (v *credentialsTableType) NewRecord() reform.Record {
	return new(Credentials)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *credentialsTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// CredentialsTable represents credentials view or table in SQL database.
var CredentialsTable = &credentialsTableType{
	s: parse.StructInfo{Type: "Credentials", SQLSchema: "", SQLName: "credentials", Fields: []parse.FieldInfo{{Name: "ID", Type: "int64", Column: "id"}, {Name: "Login", Type: "string", Column: "login"}, {Name: "Email", Type: "string", Column: "email"}, {Name: "Phone", Type: "string", Column: "phone"}, {Name: "Hash", Type: "[]uint8", Column: "password"}, {Name: "CreateDttm", Type: "time.Time", Column: "create_dttm"}}, PKFieldIndex: 0},
	z: new(Credentials).Values(),
}

// String returns a string representation of this struct or record.
func (s Credentials) String() string {
	res := make([]string, 6)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "Login: " + reform.Inspect(s.Login, true)
	res[2] = "Email: " + reform.Inspect(s.Email, true)
	res[3] = "Phone: " + reform.Inspect(s.Phone, true)
	res[4] = "Hash: " + reform.Inspect(s.Hash, true)
	res[5] = "CreateDttm: " + reform.Inspect(s.CreateDttm, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Credentials) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.Login,
		s.Email,
		s.Phone,
		s.Hash,
		s.CreateDttm,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Credentials) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.Login,
		&s.Email,
		&s.Phone,
		&s.Hash,
		&s.CreateDttm,
	}
}

// View returns View object for that struct.
func (s *Credentials) View() reform.View {
	return CredentialsTable
}

// Table returns Table object for that record.
func (s *Credentials) Table() reform.Table {
	return CredentialsTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Credentials) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Credentials) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Credentials) HasPK() bool {
	return s.ID != CredentialsTable.z[CredentialsTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *Credentials) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.ID = int64(i64)
	} else {
		s.ID = pk.(int64)
	}
}

// check interfaces
var (
	_ reform.View   = CredentialsTable
	_ reform.Struct = (*Credentials)(nil)
	_ reform.Table  = CredentialsTable
	_ reform.Record = (*Credentials)(nil)
	_ fmt.Stringer  = (*Credentials)(nil)
)

func init() {
	parse.AssertUpToDate(&CredentialsTable.s, new(Credentials))
}
